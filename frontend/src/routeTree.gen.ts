/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedLayoutImport } from './routes/_authenticated/_layout'
import { Route as AuthenticatedNewOrganizationRouteImport } from './routes/_authenticated/new-organization/route'
import { Route as authSignupRouteImport } from './routes/(auth)/signup/route'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password/route'
import { Route as authLoginRouteImport } from './routes/(auth)/login/route'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password/route'
import { Route as AuthenticatedLayoutIndexImport } from './routes/_authenticated/_layout/index'
import { Route as AuthenticatedLayoutUserSettingsRouteImport } from './routes/_authenticated/_layout/user-settings/route'
import { Route as AuthenticatedLayoutNotesRouteImport } from './routes/_authenticated/_layout/notes/route'
import { Route as AuthenticatedLayoutBoardsRouteImport } from './routes/_authenticated/_layout/boards/route'
import { Route as AuthenticatedLayoutBoardsBoardUrlRouteImport } from './routes/_authenticated/_layout/boards_.$boardUrl/route'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedLayoutRoute = AuthenticatedLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedNewOrganizationRouteRoute =
  AuthenticatedNewOrganizationRouteImport.update({
    id: '/new-organization',
    path: '/new-organization',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const authSignupRouteRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authResetPasswordRouteRoute = authResetPasswordRouteImport.update({
  id: '/(auth)/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRouteRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authForgotPasswordRouteRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedLayoutIndexRoute = AuthenticatedLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedLayoutRoute,
} as any)

const AuthenticatedLayoutUserSettingsRouteRoute =
  AuthenticatedLayoutUserSettingsRouteImport.update({
    id: '/user-settings',
    path: '/user-settings',
    getParentRoute: () => AuthenticatedLayoutRoute,
  } as any)

const AuthenticatedLayoutNotesRouteRoute =
  AuthenticatedLayoutNotesRouteImport.update({
    id: '/notes',
    path: '/notes',
    getParentRoute: () => AuthenticatedLayoutRoute,
  } as any)

const AuthenticatedLayoutBoardsRouteRoute =
  AuthenticatedLayoutBoardsRouteImport.update({
    id: '/boards',
    path: '/boards',
    getParentRoute: () => AuthenticatedLayoutRoute,
  } as any)

const AuthenticatedLayoutBoardsBoardUrlRouteRoute =
  AuthenticatedLayoutBoardsBoardUrlRouteImport.update({
    id: '/boards_/$boardUrl',
    path: '/boards/$boardUrl',
    getParentRoute: () => AuthenticatedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/new-organization': {
      id: '/_authenticated/new-organization'
      path: '/new-organization'
      fullPath: '/new-organization'
      preLoaderRoute: typeof AuthenticatedNewOrganizationRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_layout': {
      id: '/_authenticated/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedLayoutImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_layout/boards': {
      id: '/_authenticated/_layout/boards'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof AuthenticatedLayoutBoardsRouteImport
      parentRoute: typeof AuthenticatedLayoutImport
    }
    '/_authenticated/_layout/notes': {
      id: '/_authenticated/_layout/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthenticatedLayoutNotesRouteImport
      parentRoute: typeof AuthenticatedLayoutImport
    }
    '/_authenticated/_layout/user-settings': {
      id: '/_authenticated/_layout/user-settings'
      path: '/user-settings'
      fullPath: '/user-settings'
      preLoaderRoute: typeof AuthenticatedLayoutUserSettingsRouteImport
      parentRoute: typeof AuthenticatedLayoutImport
    }
    '/_authenticated/_layout/': {
      id: '/_authenticated/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedLayoutIndexImport
      parentRoute: typeof AuthenticatedLayoutImport
    }
    '/_authenticated/_layout/boards_/$boardUrl': {
      id: '/_authenticated/_layout/boards_/$boardUrl'
      path: '/boards/$boardUrl'
      fullPath: '/boards/$boardUrl'
      preLoaderRoute: typeof AuthenticatedLayoutBoardsBoardUrlRouteImport
      parentRoute: typeof AuthenticatedLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedLayoutRouteChildren {
  AuthenticatedLayoutBoardsRouteRoute: typeof AuthenticatedLayoutBoardsRouteRoute
  AuthenticatedLayoutNotesRouteRoute: typeof AuthenticatedLayoutNotesRouteRoute
  AuthenticatedLayoutUserSettingsRouteRoute: typeof AuthenticatedLayoutUserSettingsRouteRoute
  AuthenticatedLayoutIndexRoute: typeof AuthenticatedLayoutIndexRoute
  AuthenticatedLayoutBoardsBoardUrlRouteRoute: typeof AuthenticatedLayoutBoardsBoardUrlRouteRoute
}

const AuthenticatedLayoutRouteChildren: AuthenticatedLayoutRouteChildren = {
  AuthenticatedLayoutBoardsRouteRoute: AuthenticatedLayoutBoardsRouteRoute,
  AuthenticatedLayoutNotesRouteRoute: AuthenticatedLayoutNotesRouteRoute,
  AuthenticatedLayoutUserSettingsRouteRoute:
    AuthenticatedLayoutUserSettingsRouteRoute,
  AuthenticatedLayoutIndexRoute: AuthenticatedLayoutIndexRoute,
  AuthenticatedLayoutBoardsBoardUrlRouteRoute:
    AuthenticatedLayoutBoardsBoardUrlRouteRoute,
}

const AuthenticatedLayoutRouteWithChildren =
  AuthenticatedLayoutRoute._addFileChildren(AuthenticatedLayoutRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedNewOrganizationRouteRoute: typeof AuthenticatedNewOrganizationRouteRoute
  AuthenticatedLayoutRoute: typeof AuthenticatedLayoutRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedNewOrganizationRouteRoute:
    AuthenticatedNewOrganizationRouteRoute,
  AuthenticatedLayoutRoute: AuthenticatedLayoutRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedLayoutRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRouteRoute
  '/login': typeof authLoginRouteRoute
  '/reset-password': typeof authResetPasswordRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/new-organization': typeof AuthenticatedNewOrganizationRouteRoute
  '/boards': typeof AuthenticatedLayoutBoardsRouteRoute
  '/notes': typeof AuthenticatedLayoutNotesRouteRoute
  '/user-settings': typeof AuthenticatedLayoutUserSettingsRouteRoute
  '/': typeof AuthenticatedLayoutIndexRoute
  '/boards/$boardUrl': typeof AuthenticatedLayoutBoardsBoardUrlRouteRoute
}

export interface FileRoutesByTo {
  '': typeof AuthenticatedRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRouteRoute
  '/login': typeof authLoginRouteRoute
  '/reset-password': typeof authResetPasswordRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/new-organization': typeof AuthenticatedNewOrganizationRouteRoute
  '/boards': typeof AuthenticatedLayoutBoardsRouteRoute
  '/notes': typeof AuthenticatedLayoutNotesRouteRoute
  '/user-settings': typeof AuthenticatedLayoutUserSettingsRouteRoute
  '/': typeof AuthenticatedLayoutIndexRoute
  '/boards/$boardUrl': typeof AuthenticatedLayoutBoardsBoardUrlRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRouteRoute
  '/(auth)/login': typeof authLoginRouteRoute
  '/(auth)/reset-password': typeof authResetPasswordRouteRoute
  '/(auth)/signup': typeof authSignupRouteRoute
  '/_authenticated/new-organization': typeof AuthenticatedNewOrganizationRouteRoute
  '/_authenticated/_layout': typeof AuthenticatedLayoutRouteWithChildren
  '/_authenticated/_layout/boards': typeof AuthenticatedLayoutBoardsRouteRoute
  '/_authenticated/_layout/notes': typeof AuthenticatedLayoutNotesRouteRoute
  '/_authenticated/_layout/user-settings': typeof AuthenticatedLayoutUserSettingsRouteRoute
  '/_authenticated/_layout/': typeof AuthenticatedLayoutIndexRoute
  '/_authenticated/_layout/boards_/$boardUrl': typeof AuthenticatedLayoutBoardsBoardUrlRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/new-organization'
    | '/boards'
    | '/notes'
    | '/user-settings'
    | '/'
    | '/boards/$boardUrl'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/new-organization'
    | '/boards'
    | '/notes'
    | '/user-settings'
    | '/'
    | '/boards/$boardUrl'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/reset-password'
    | '/(auth)/signup'
    | '/_authenticated/new-organization'
    | '/_authenticated/_layout'
    | '/_authenticated/_layout/boards'
    | '/_authenticated/_layout/notes'
    | '/_authenticated/_layout/user-settings'
    | '/_authenticated/_layout/'
    | '/_authenticated/_layout/boards_/$boardUrl'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  authForgotPasswordRouteRoute: typeof authForgotPasswordRouteRoute
  authLoginRouteRoute: typeof authLoginRouteRoute
  authResetPasswordRouteRoute: typeof authResetPasswordRouteRoute
  authSignupRouteRoute: typeof authSignupRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  authForgotPasswordRouteRoute: authForgotPasswordRouteRoute,
  authLoginRouteRoute: authLoginRouteRoute,
  authResetPasswordRouteRoute: authResetPasswordRouteRoute,
  authSignupRouteRoute: authSignupRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/(auth)/forgot-password",
        "/(auth)/login",
        "/(auth)/reset-password",
        "/(auth)/signup"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/new-organization",
        "/_authenticated/_layout"
      ]
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password/route.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login/route.tsx"
    },
    "/(auth)/reset-password": {
      "filePath": "(auth)/reset-password/route.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup/route.tsx"
    },
    "/_authenticated/new-organization": {
      "filePath": "_authenticated/new-organization/route.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/_layout": {
      "filePath": "_authenticated/_layout.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/_layout/boards",
        "/_authenticated/_layout/notes",
        "/_authenticated/_layout/user-settings",
        "/_authenticated/_layout/",
        "/_authenticated/_layout/boards_/$boardUrl"
      ]
    },
    "/_authenticated/_layout/boards": {
      "filePath": "_authenticated/_layout/boards/route.tsx",
      "parent": "/_authenticated/_layout"
    },
    "/_authenticated/_layout/notes": {
      "filePath": "_authenticated/_layout/notes/route.tsx",
      "parent": "/_authenticated/_layout"
    },
    "/_authenticated/_layout/user-settings": {
      "filePath": "_authenticated/_layout/user-settings/route.tsx",
      "parent": "/_authenticated/_layout"
    },
    "/_authenticated/_layout/": {
      "filePath": "_authenticated/_layout/index.tsx",
      "parent": "/_authenticated/_layout"
    },
    "/_authenticated/_layout/boards_/$boardUrl": {
      "filePath": "_authenticated/_layout/boards_.$boardUrl/route.tsx",
      "parent": "/_authenticated/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
